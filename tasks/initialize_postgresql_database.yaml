---
- name: upload database initialize scripts to db server
  ansible.posix.synchronize:
    src: '{{ code.path }}/db/'
    dest: '{{ postgresql.path }}/'
    mode: push
    delete: yes
    recursive: yes
  delegate_to: '{{groups[deploy_environment + "_build_server"][0]}}'

- name: remove exist databases
  community.postgresql.postgresql_db:
    name: '{{ item.name }}'
    port: '{{ postgresql.port }}'
    state: absent
  become: yes
  become_user: postgres
  loop:
    '{{ postgresql.database }}'

- name: initialize databases
  command: 'psql --file={{ postgresql.path }}/{{ item.init_file }} --port={{ postgresql.port }}'
  become: yes
  become_user: postgres
  loop:
    '{{ postgresql.database }}'

- name: ensure user has the access, step 1
  community.postgresql.postgresql_privs:
    db: '{{ item.name }}'
    port: '{{ postgresql.port }}'
    role: '{{ postgresql.user }}'
    objs: ALL_DEFAULT
    privs: ALL
    type: default_privs
    grant_option: yes
  become: yes
  become_user: postgres
  loop:
    '{{ postgresql.database }}'

- name: ensure user has the access, step 2
  community.postgresql.postgresql_privs:
    db: '{{ item.name }}'
    port: '{{ postgresql.port }}'
    role: '{{ postgresql.user }}'
    objs: ALL_IN_SCHEMA
    type: table
    privs: SELECT,INSERT,UPDATE,DELETE,TRIGGER
  become: yes
  become_user: postgres
  loop:
    '{{ postgresql.database }}'

- name: ensure user has the access, step 3
  community.postgresql.postgresql_privs:
    db: '{{ item.name }}'
    port: '{{ postgresql.port }}'
    role: '{{ postgresql.user }}'
    objs: ALL_IN_SCHEMA
    type: sequence
    privs: SELECT,UPDATE,USAGE
  become: yes
  become_user: postgres
  loop:
    '{{ postgresql.database }}'