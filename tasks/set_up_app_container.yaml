---
- name: include docker registry credential
  include_vars:
    file: /tmp/docker_registry_credential.yaml

- name: upload certificate to app server
  ansible.posix.synchronize:
    src: '{{ hostvars[groups[deploy_environment + "_build_server"][0]].registry_path | default("") }}/certs/docker.crt'
    dest: '/tmp/docker.crt'
    mode: push
    delete: yes
    recursive: yes
  delegate_to: '{{ groups[deploy_environment + "_build_server"][0] }}'

- name: ensure storing certificate directory exists
  file:
    path: '/etc/docker/certs.d/{{ hostvars[groups[deploy_environment + "_build_server"][0]].ansible_host }}:443/'
    state: directory
    mode: 0755
  become: yes
  register: certificate_directory

- name: move certificate to destination
  copy:
    src: '/tmp/docker.crt'
    dest: '{{ certificate_directory.path }}/docker.crt'
    mode: 0644
    remote_src: yes
  become: yes

- name: pull docker image

  block:
    - name: log into private registry
      command: 'docker login {{ hostvars[groups[deploy_environment + "_build_server"][0]].ansible_host }}:{{ docker_registry.port }} --username {{ docker_registry.user }} --password {{ docker_registry.password }}'
    - name: pull docker image from private registry
      command: 'docker pull {{ hostvars[groups[deploy_environment + "_build_server"][0]].ansible_host }}:{{ docker_registry.port }}/{{ project | replace(" ", "-") }}:{{ deploy_environment }}'

  always:
    - name: log out private registry
      command: 'docker logout {{ hostvars[groups[deploy_environment + "_build_server"][0]].ansible_host }}:{{ docker_registry.port }}'

- name: create directories storing related files
  file:
    path: '{{ code.path }}/{{ item }}'
    state: directory
    mode: '0755'
  loop:
    '{{ code.folder }}'
  become: yes

- name: check for containers that actually exist
  shell: 'docker ps -aq --filter "name={{ item }}"'
  loop:
    - '{{ project | replace(" ", "-") }}-{{ deploy_environment }}'
  register: found_containers

- name: remove the containers found
  shell: 'docker stop {{ item.item }} && docker rm -f {{ item.item }}'
  loop: '{{ found_containers.results }}'
  when: item.stdout

- name: start docker container
  command: 'docker run --name={{ project | replace(" ", "-") }}-{{ deploy_environment }} -d -v {{ code.path }}:{{ code.path }} -p {{ docker.host_port }}:{{ docker.container_port }} --rm {{ hostvars[groups[deploy_environment + "_build_server"][0]].ansible_host }}:{{ docker_registry.port }}/{{ project | replace(" ", "-") }}:{{ deploy_environment }}'