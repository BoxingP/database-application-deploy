---
- name: include docker registry credential
  include_vars:
    file: '/tmp/{{ hostvars[groups[deploy_environment + "_build_server"][0]].ansible_host | default("") }}_docker_registry_credential.yaml'

- name: upload certificate to app server
  ansible.posix.synchronize:
    src: '{{ docker_registry.path }}/certs/docker.crt'
    dest: '/tmp/docker.crt'
    mode: push
    delete: yes
    recursive: yes
  delegate_to: '{{ groups[deploy_environment + "_build_server"][0] }}'
  vars:
    - ansible_user: '{{ synchronize_user | default(hostvars[inventory_hostname].ansible_user) }}'
    - ansible_password: '{{ synchronize_password | default(hostvars[inventory_hostname].ansible_password) }}'

- name: ensure storing certificate directory exists
  file:
    path: '/etc/docker/certs.d/{{ docker_registry.host }}:{{ docker_registry.port }}/'
    state: directory
    mode: 0755
  become: yes
  register: certificate_directory

- name: move certificate to destination
  copy:
    src: '/tmp/docker.crt'
    dest: '{{ certificate_directory.path }}/docker.crt'
    mode: 0644
    remote_src: yes
  become: yes

- name: pull docker image

  block:
    - name: log into private registry
      command: 'docker login {{ docker_registry.host }}:{{ docker_registry.port }} --username {{ docker_registry.user }} --password {{ docker_registry.password }}'
    - name: pull docker image from private registry
      command: 'docker pull {{ docker_registry.host }}:{{ docker_registry.port }}/{{ project | replace(" ", "-") }}-{{ item.name }}:{{ deploy_environment }}'
      loop: '{{ code }}'

  always:
    - name: log out private registry
      command: 'docker logout {{ docker_registry.host }}:{{ docker_registry.port }}'

- name: create directories storing related files
  file:
    path: '{{ component.path }}/{{ item }}'
    state: directory
    recurse: yes
    mode: '0755'
  loop: '{{ component.folder.values() | list }}'
  become: yes

- name: check for containers that actually exist
  shell: 'docker ps -aq --filter "name={{ project | replace(" ", "-") }}-{{ component.name }}-{{ deploy_environment }}"'
  register: found_containers

- name: remove the containers found
  shell: 'docker stop {{ found_containers.stdout }} && docker rm -f {{ found_containers.stdout }}'
  when: found_containers.stdout

- name: start app docker container
  command: 'docker run --name={{ project | replace(" ", "-") }}-{{ component.name }}-{{ deploy_environment }} -d -v {{ component.path }}:{{ component.path }} -p {{ docker.host_port }}:{{ docker.container_port }} --restart=always {{ docker_registry.host }}:{{ docker_registry.port }}/{{ project | replace(" ", "-") }}-{{ component.name }}:{{ deploy_environment }}'
  when: component.name == 'app'

- name: start housekeeping docker container
  command: 'docker run --name={{ project | replace(" ", "-") }}-{{ component.name }}-{{ deploy_environment }} -d -v {{ component.path }}:{{ component.path }} -v {{ component.path }}/{{ component.folder.cron }}:/var/log/cron -e CONTAINER_HOSTNAME={{ hostvars[inventory_hostname].ansible_host }} --restart=always {{ docker_registry.host }}:{{ docker_registry.port }}/{{ project | replace(" ", "-") }}-{{ component.name }}:{{ deploy_environment }}'
  when: component.name == 'housekeeping'