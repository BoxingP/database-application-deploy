---
- name: get hosts facts
  hosts: all
  gather_facts: yes

- name: load ssh key
  hosts: localhost
  gather_facts: no
  vars_files:
    - 'vars/{{ project | replace(" ", "_") }}_{{ deploy_environment }}_config.yaml'
  tasks:
    - name: kill running ssh agent
      shell: ps aux | grep [s]sh | awk '{print $2}' | xargs sudo kill -15
      become: yes
    - name: start ssh agent
      shell: |
        eval $(ssh-agent -s) > /dev/null
        echo '{"SSH_AUTH_SOCK":"'$SSH_AUTH_SOCK'","SSH_AGENT_PID":"'$SSH_AGENT_PID'"}'
      register: env_vars_stdout
    - name: store environment variables
      set_fact:
        env_vars: '{{ env_vars_stdout.stdout }}'
    - name: add ssh key
      shell: ssh-add '{{ item.repo_private_key }}'
      environment: '{{ env_vars }}'
      loop: '{{ code }}'

- name: fetch project codes
  hosts: '{{ deploy_environment }}_build_server'
  gather_facts: no
  vars:
    ansible_ssh_common_args: '-o IdentityAgent={{ hostvars["localhost"]["env_vars"]["SSH_AUTH_SOCK"] }}'
  vars_files:
    - 'vars/{{ project | replace(" ", "_") }}_{{ deploy_environment }}_config.yaml'
  tasks:
    - name: init server environment
      include_role:
        name: init_server_environment
    - name: init workspace
      include_tasks: tasks/init_workspace.yaml
      loop: '{{ code }}'
      loop_control:
        loop_var: component

- name: set up db server
  hosts: '{{ deploy_environment }}_db_servers'
  gather_facts: no
  vars_files:
    - 'vars/{{ project | replace(" ", "_") }}_{{ deploy_environment }}_config.yaml'
  tasks:
    - name: check target databases exist
      shell:
        cmd: 'psql -lqt -p {{ postgresql.port }} | cut -d \| -f 1 | grep -qw {{ item.name }}'
      register: database_exist
      loop:
        '{{ postgresql.database }}'
      become: yes
      become_user: postgres
      ignore_errors: true
    - name: check postgresql credential exists
      stat:
        path: '/tmp/{{ hostvars[inventory_hostname].ansible_host }}_postgresql_database_config.yaml'
      register: credential_exist
      delegate_to: localhost
    - name: set up postgresql database
      block:
        - name: init server environment
          include_role:
            name: init_server_environment
        - name: build postgresql
          include_role:
            name: build_postgresql
      when: ( database_exist.failed is defined and database_exist.failed ) or not credential_exist.stat.exists

- name: build project codes
  hosts: '{{ deploy_environment }}_build_server'
  gather_facts: no
  vars:
    virtualenv: '{{ hostvars[inventory_hostname].ansible_env.HOME }}/.virtualenvs/{{ project | replace(" ", "-") }}-{{ deploy_environment }}-env'
  vars_files:
    - 'vars/{{ project | replace(" ", "_") }}_{{ deploy_environment }}_config.yaml'
  tasks:
    - name: import postgresql credential
      include_tasks: tasks/import_postgresql_credential.yaml
    - name: init server environment
      include_role:
        name: init_server_environment
    - name: create python environment
      include_role:
        name: create_python_environment
      vars:
        requirements_file: 'vars/server_requirements.yaml'
    - name: install docker
      include_role:
        name: install_docker
    - name: build docker
      block:
        - name: set up docker registry
          import_role:
            name: set_up_docker_registry
        - name: build docker image
          include_tasks: tasks/build_docker_image.yaml
          loop: '{{ code }}'
          loop_control:
            loop_var: component
      vars:
        ansible_python_interpreter: '{{ virtualenv }}/bin/python3'
      environment:
        PATH: '{{ virtualenv }}/bin:{{ hostvars[inventory_hostname].ansible_env.PATH }}'

- name: set up app server
  hosts: '{{ deploy_environment }}_app_servers'
  gather_facts: no
  vars_files:
    - 'vars/{{ project | replace(" ", "_") }}_{{ deploy_environment }}_config.yaml'
  tasks:
    - name: init server environment
      include_role:
        name: init_server_environment
    - name: install docker
      include_role:
        name: install_docker
    - name: set up app container
      import_tasks: tasks/set_up_docker_container.yaml